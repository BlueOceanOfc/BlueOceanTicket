const axios = require('axios');
const logger = require('../logger'); // Sistema de logs
const {
  removerTagsHTML,
  extrairOrderIdDaMensagem,
  buscarStatusPedido,
  responderTicket,
} = require('./apiService'); // Fun√ß√µes de utilidades para limpeza de texto e extra√ß√£o do Order ID

// Adicione essa fun√ß√£o no in√≠cio ou final do arquivo iaSolicitacao.js

// Fun√ß√£o para extrair m√∫ltiplos Order IDs

function extrairTodosOrderIds(mensagem) {
  if (!mensagem) return [];

  // Altera√ß√£o na regex para capturar apenas sequ√™ncias de 6 d√≠gitos
  const regexOrderId = /<div><b>Order ID<\/b>: (\d{6})<\/div>/g; // 6 d√≠gitos
  let orderIds = [];
  let match;

  // Usar o regex para capturar os Order IDs dentro das tags <div><b>Order ID</b>:
  while ((match = regexOrderId.exec(mensagem)) !== null) {
    orderIds.push(match[1]); // Adiciona os IDs encontrados
  }

  // Se n√£o encontrar IDs diretamente, tentamos capturar qualquer sequ√™ncia num√©rica de 6 d√≠gitos
  if (orderIds.length === 0) {
    const regexForaDeTags = /\b\d{6}\b/g; // Captura apenas n√∫meros de 6 d√≠gitos
    orderIds = [...new Set(mensagem.match(regexForaDeTags) || [])]; // Adiciona IDs encontrados fora das tags
  }

  // Caso haja IDs concatenados, separe-os (como no caso de 550039550039)
  const orderIdsSeparados = [];
  for (const orderId of orderIds) {
    if (orderId.length >= 12) {
      // Se o ID for maior que 12 d√≠gitos, dividimos em dois IDs de 6 d√≠gitos cada
      const partes = orderId.match(/(\d{6})(\d{6})/);
      if (partes) {
        orderIdsSeparados.push(partes[1], partes[2]);
      } else {
        orderIdsSeparados.push(orderId); // Se n√£o puder ser dividido, adiciona como est√°
      }
    } else {
      orderIdsSeparados.push(orderId); // Adiciona IDs v√°lidos de 6 d√≠gitos
    }
  }

  // Remover IDs duplicados
  const orderIdsUnicos = [...new Set(orderIdsSeparados)];

  console.log('-----------extrairTodosOrdersID');
  console.log('‚úÖ Order IDs extra√≠dos:', orderIdsUnicos);
  return orderIdsUnicos;
}

async function processarOrderIds(
  ticketId,
  tipoSolicitacao,
  mensagem,
  idiomaDetectado,
) {
  const orderIds = extrairTodosOrderIds(mensagem); // Extrai todos os Order IDs da mensagem
  console.log(
    `üì¶ [processarOrderIds] Order IDs extra√≠dos: ${orderIds.join(', ')}`,
  );

  if (orderIds.length === 0) {
    console.log(`‚ùå Nenhum Order ID encontrado no ticket ${ticketId}`);
    return `No Order IDs were found in the message.`;
  }

  let pedidosAptos = [];
  let pedidosNaoAptos = [];
  let mensagemRespostas = '';
  const orderIdsProcessados = new Set(); // Conjunto para verificar se o Order ID j√° foi processado

  // Processa cada Order ID
  for (const orderId of orderIds) {
    if (orderIdsProcessados.has(orderId)) {
      console.log(`üö´ Order ID ${orderId} j√° foi processado, ignorando.`);
      continue;
    }

    orderIdsProcessados.add(orderId);

    let orderData = await buscarStatusPedido(orderId);
    if (!orderData) {
      pedidosNaoAptos.push({ orderId, motivo: 'N√£o encontrado' });
      continue;
    }

    if (orderData.status === 'canceled') {
      pedidosNaoAptos.push({ orderId, motivo: 'Pedido j√° cancelado' });
    } else if (orderData.status === 'completed') {
      pedidosNaoAptos.push({ orderId, motivo: 'Pedido j√° completo' });
    } else {
      pedidosAptos.push(orderId);
    }
  }

  // Gerando a resposta para o cliente
  if (pedidosAptos.length > 0) {
    mensagemRespostas += `The following Order IDs have been sent for speed-up: ${pedidosAptos.join(
      ', ',
    )}.\n\n`;
  }

  if (pedidosNaoAptos.length > 0) {
    mensagemRespostas += `The following Order IDs were not processed:\n`;
    pedidosNaoAptos.forEach((pedido) => {
      mensagemRespostas += `Order ID ${pedido.orderId} - Reason: ${pedido.motivo}\n`;
    });
  }

  // Verifique se a resposta j√° foi enviada
  let respostaEnviada = false;

  // Enviar a resposta ao cliente
  if (!respostaEnviada) {
    console.log(`-----------ProcessarOdersID-----------`);
    console.log(
      `Resposta enviada para o ticket ${ticketId}: ${mensagemRespostas}`,
    );
    await responderTicket(ticketId, mensagemRespostas);
    respostaEnviada = true; // Marca a resposta como enviada
  }

  return mensagemRespostas;
}

function cortarMensagemUtil(mensagemOriginal) {
  console.log(`-------------CORTAR MENSAGEM -------------------`);
  console.log(`üìú Mensagem original: "${mensagemOriginal}"`);

  // Encontrar a posi√ß√£o da primeira tag </b>
  const primeiraTagFechamento = mensagemOriginal.indexOf('</b>'); // Encontra a primeira tag </b>

  if (primeiraTagFechamento === -1) {
    // Se n√£o encontrar a tag </b>, retorna a mensagem original
    console.log(
      `‚ö° N√£o foi poss√≠vel localizar a tag </b>, retornando a mensagem original.`,
    );
    return mensagemOriginal;
  }

  // Encontrar a posi√ß√£o da segunda tag </b>
  let segundaTagFechamento = mensagemOriginal.indexOf(
    '</b>',
    primeiraTagFechamento + 1,
  );

  // Caso a segunda tag </b> n√£o exista, tentamos retornar a partir da primeira
  if (segundaTagFechamento === -1) {
    console.log(
      `‚ö° Segunda tag </b> n√£o encontrada, utilizando a primeira tag </b> para cortar a mensagem.`,
    );
    // Caso n√£o tenha a segunda tag </b>, retornamos o restante da mensagem a partir da primeira
    return mensagemOriginal.slice(primeiraTagFechamento + 4).trim();
  }

  // Caso encontre a segunda tag </b>, cortamos a partir dela
  let cortadaComTags = mensagemOriginal.slice(segundaTagFechamento + 4).trim(); // Pula a segunda tag </b> e mant√©m o resto

  // Remover as tags HTML da mensagem cortada
  //const cortadaSemTags = cortadaComTags.replace(/<\/?[^>]+(>|$)/g, '').trim();

  console.log(`üîß Mensagem cortada: "${cortadaComTags}"`);
  return cortadaComTags;
}

async function classificarCategoriaGeral(mensagemOriginal) {
  // Chama a fun√ß√£o cortarMensagemUtil diretamente para obter a mensagem cortada corretamente
  const mensagemCortada = cortarMensagemUtil(mensagemOriginal); // A mensagem cortada j√° est√° aqui

  // Verifica se `mensagemCortada` est√° em um formato esperado
  console.log(`------- CLASSIFICAR CATEGORIA ------------`);
  console.log(`‚úÇÔ∏è classificar:  Mensagem cortada (√∫til): "${mensagemCortada}"`);

  // Refinando o prompt para a IA, deixando claro que a palavra "cancelar" se refere a um pedido
  const prompt = `
    Voc√™ √© um assistente de suporte multil√≠ngue. Sua tarefa √© classificar a mensagem do cliente como "Pedido", "Pagamento" ou "Outro", com base no conte√∫do da mensagem.

    
    1. **"Pedido"** ‚Äì Se a mensagem for sobre qualquer aspecto de um pedido, como cancelamento, acelera√ß√£o, status, garantia, refil, ou entrega.
       - A IA deve identificar que, mesmo sem o **Order ID**, a mensagem √© sobre um pedido. 
       - **Se a mensagem contiver "Speed" ou "SpeedUp"**, isso deve ser automaticamente classificado como "Pedido", **mesmo sem o n√∫mero do pedido presente**. Exemplo: "Speed", "SpeedUp", "Please speed up my order", "I need to speed my request", "18575speed", entre outros.

    2. "Pagamento" ‚Äì se a mensagem for sobre quest√µes financeiras, como valor, fatura, cobran√ßa, saldo, cart√£o, comprovante de pagamento, falha no pagamento, etc.
    3. "Outro" ‚Äì se n√£o for relacionado a pedidos ou pagamentos. Exemplos: perda de senha, suporte t√©cnico, d√∫vidas gerais, reclama√ß√µes, acesso √† conta, etc.

    ‚ö†Ô∏è IMPORTANTE:
    - A mensagem pode ser em qualquer idioma ‚Äî a IA deve ser capaz de entender isso.
    - Se a mensagem estiver relacionada a um **pedido**, mesmo sem o **Order ID**, classifique como "Pedido" e solicite ao cliente o **Order ID**.
    - Se a mensagem for sobre pagamento ou quest√µes financeiras, classifique como "Pagamento".
    - Caso contr√°rio, classifique como "Outro".

    Mensagem do cliente:
    """${mensagemCortada}"""
  `;

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o-mini-2024-07-18',
        messages: [
          {
            role: 'system',
            content:
              'Voc√™ √© um assistente de suporte. Classifique a mensagem como "Pedido", "Pagamento" ou "Outro".',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        max_tokens: 10,
        temperature: 0.1,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      },
    );

    const resultado = response.data.choices[0].message.content.trim();

    // Verificar se o resultado est√° dentro das categorias esperadas
    if (!['Pedido', 'Pagamento', 'Outro'].includes(resultado)) {
      console.log(`‚ö†Ô∏è Resposta inesperada da IA: ${resultado}`);
      return 'Outro'; // fallback seguro para retornar "Outro" caso n√£o identifique uma categoria v√°lida
    }
    console.log(`üéØ Categoria classificada pela IA: ${resultado}`);
    return resultado; // Retorna a categoria classificada
  } catch (error) {
    logger.error('Erro ao classificar categoria geral:', error.message);
    return 'Outro'; // Retorna "Outro" como fallback seguro se houver erro durante a classifica√ß√£o
  }
}

// Fun√ß√£o para detectar o idioma usando a OpenAI
// Fun√ß√£o para detectar o idioma usando a OpenAI
async function detectLanguage(messages) {
  if (!Array.isArray(messages)) {
    logger.error(
      'O par√¢metro messages n√£o √© um array. Convertendo para array.',
    );
    messages = [messages];
  }

  const ultimaMensagemUtil = messages
    .slice()
    .reverse()
    .find(
      (msg) =>
        msg.message &&
        typeof msg.message === 'string' &&
        msg.message.trim().length > 5,
    );

  if (!ultimaMensagemUtil) {
    logger.error('Nenhuma mensagem √∫til encontrada para an√°lise.');
    return 'en';
  }

  // üîç Aplica o corte inteligente da mensagem apenas uma vez
  const mensagemCortada = cortarMensagemUtil(ultimaMensagemUtil.message); // A vers√£o cortada da mensagem j√° √© gerada aqui

  // Mostra no log a diferen√ßa
  console.log(`---------- DetectLanguage------------`);
  console.log(`‚úÇÔ∏è Mensagem cortada (√∫til): "${mensagemCortada}"`);

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o-mini-2024-07-18',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um assistente que deve identificar o idioma principal do texto a seguir. Retorne apenas o c√≥digo do idioma (ex: 'pt', 'en', 'de'). Texto: "${mensagemCortada}"`,
          },
        ],
        max_tokens: 60,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      },
    );

    const idiomaDetectado = response.data.choices[0].message.content.trim();
    if (!idiomaDetectado || idiomaDetectado === 'und') {
      console.log('‚ùå Idioma n√£o identificado, usando fallback pt');
      return 'en';
    }

    console.log(`üåê Idioma detectado: ${idiomaDetectado}`);
    return idiomaDetectado;
  } catch (error) {
    console.log('‚ùå Erro na detec√ß√£o de idioma:', error.message);
    return 'en';
  }
}

async function traduzirTexto(texto, idiomaDestino) {
  if (!idiomaDestino) {
    logger.error('Idioma de destino n√£o especificado para tradu√ß√£o.');
    return texto; // Retorna o texto original se n√£o houver idioma de destino
  }

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o-mini-2024-07-18', // Modelo da OpenAI
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um tradutor. Sua tarefa √© traduzir o texto solicitado para o idioma ${idiomaDestino}, preservando o significado e contexto, e considerando que pode haver mistura de l√≠nguas no texto. Traduza com precis√£o para o idioma ${idiomaDestino}.`,
          },
          {
            role: 'user',
            content: `Traduza o seguinte texto para o idioma ${idiomaDestino}: ${texto}`,
          },
        ],
        max_tokens: 300,
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      },
    );

    if (response.data && response.data.choices && response.data.choices[0]) {
      return response.data.choices[0].message.content.trim(); // Retorna a tradu√ß√£o
    } else {
      throw new Error('Resposta da IA n√£o est√° no formato esperado.');
    }
  } catch (error) {
    logger.error('Erro ao traduzir com OpenAI:', error.message);
    return texto; // Retorna o texto original em caso de erro
  }
}

async function gerarMensagemSolicitandoOrderId(idiomaDestino = 'en') {
  const textoBase = `Hello, we require the *Order ID* in order to continue with your request. Please provide the *Order ID* so we can assist you further.

Best regards,

Marcelle

‚ûï Join us as a reseller for just $25 - [Reseller Link](https://smmexcellent.com/child-panel)
‚ûï Invite friends, share your link, and earn! - [Affiliate Link](https://smmexcellent.com/affiliates)`;

  if (idiomaDestino === 'en') {
    return textoBase;
  }

  try {
    const traduzido = await traduzirTexto(textoBase, idiomaDestino);
    return traduzido;
  } catch (error) {
    logger.error(
      'Erro ao gerar mensagem de solicita√ß√£o de Order ID:',
      error.message,
    );
    return textoBase;
  }
}

// Fun√ß√£o para gerar a solicita√ß√£o √† IA
async function verificarTipoDeSolicitacao(messages) {
  // Filtra as √∫ltimas 3 mensagens do cliente
  const mensagensCliente = messages
    .filter((msg) => msg.message && !msg.is_staff)
    .slice(-3); // √öltimas 3 mensagens

  // Junta as mensagens para uma √∫nica string
  const messageText = mensagensCliente
    .map((msg) => msg.message.trim()) // N√£o remove tags HTML antes
    .join(' ');

  // Aplica o corte na mensagem, mantendo as tags intactas
  const mensagemCortada = cortarMensagemUtil(messageText); // Chama a fun√ß√£o de corte uma vez

  // **Log para ver a mensagem cortada antes da classifica√ß√£o**
  console.log(`------ VERIFICAR TIPO DE SOLICITACAO ----------`);
  console.log(
    `üìú [verificarTipoDeSolicitacao] Analisando a mensagem do cliente: "${mensagemCortada}"`,
  );

  // Detectar idioma (continua sendo √∫til para tradu√ß√£o futura)
  const idiomaDetectado = await detectLanguage(messages); // Usa a mensagem cortada para detectar o idioma

  // ‚úÖ Classifica a categoria geral do ticket usando a mensagem cortada
  const categoria = await classificarCategoriaGeral(mensagemCortada); // Passa a mensagem cortada para a classifica√ß√£o
  console.log(
    `üéØ [verificarTipoDeSolicitacao] Categoria geral detectada: ${categoria}`,
  );

  if (categoria === 'Pagamento' || categoria === 'Outro') {
    // Ignorar processamento se for relacionado a "Pagamento" ou "Outro"
    console.log(
      `üö´ [verificarTipoDeSolicitacao] Ticket relacionado a "Pagamento" ou "Outro". Ignorando.`,
    );
    return { tipoSolicitacao: categoria, orderIds: [] }; // Retorna um array vazio de orderIds
  }

  // ‚úÖ Continua apenas se for relacionado a Pedido
  const orderIds = extrairTodosOrderIds(mensagemCortada); // Passa a vers√£o cortada da mensagem

  // **Log para ver o que aconteceu com os Order IDs extra√≠dos**
  if (orderIds.length === 0) {
    console.log(
      `‚ùó [verificarTipoDeSolicitacao] Pedido identificado, mas sem Order ID. Solicitando o Order ID ao cliente.`,
    );
  } else {
    console.log(
      `‚úÖ [verificarTipoDeSolicitacao] Order ID(s) extra√≠do(s): ${orderIds.join(
        ', ',
      )}`,
    );
  }

  if (orderIds.length === 0) {
    // Se n√£o houver Order ID, solicita o Order ID
    const mensagemSolicitacao = await gerarMensagemSolicitandoOrderId(
      idiomaDetectado,
    );
    console.log(
      `‚ùì [verificarTipoDeSolicitacao] Solicitando Order ID ao cliente. Enviar a mensagem para o cliente.`,
    );

    return { tipoSolicitacao: 'Pedido', orderIds: [] }; // Retorna vazio, pois o cliente precisa fornecer o Order ID
  }

  // üîÑ Identificar a inten√ß√£o dentro do contexto do pedido usando a mensagem cortada
  const prompt = `
    O cliente est√° solicitando suporte relacionado a um pedido. A solicita√ß√£o pode ser:

    - Cancelamento
    - Acelera√ß√£o
    - Refil/Garantia
    - Diversos (mas ainda dentro de "pedido")

    Com base nas mensagens abaixo, classifique a inten√ß√£o do cliente:
    ${mensagemCortada}

    Responda com: Cancelamento, Acelera√ß√£o, Refil/Garantia ou Diversos.
  `;

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o-mini-2024-07-18',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um assistente de suporte. Classifique a solicita√ß√£o como: Cancelamento, Acelera√ß√£o, Refil/Garantia ou Diversos.`,
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        max_tokens: 100,
        temperature: 0.5,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      },
    );

    const tipo = response.data.choices[0].message.content.trim();

    // Verificar a resposta para garantir que "Acelera√ß√£o" √© reconhecida corretamente
    if (tipo === 'speedup') {
      return { tipoSolicitacao: 'Acelera√ß√£o', orderIds };
    }

    return { tipoSolicitacao: tipo, orderIds };
  } catch (error) {
    console.log(
      `‚ùå Erro ao identificar tipo dentro de "Pedido": ${error.message}`,
    );
    return { tipoSolicitacao: 'Outro', orderIds }; // Retorna "Outro" caso falhe na classifica√ß√£o
  }
  // Log final para identificar o tipo de solicita√ß√£o
  console.log(
    `üîç [verificarTipoDeSolicitacao] Tipo de solicita√ß√£o final: ${categoria}`,
  );
}

async function gerarRespostaFinal(
  ticketId,
  tipoSolicitacao,
  orderIds, // Agora, a vari√°vel orderIds ser√° sempre um array
  orderDataList, // Agora, isso ser√° uma lista de objetos contendo os dados de cada pedido
  idiomaDetectado,
  nomeAtendente = 'Marcelle', // Nome do atendente
  linkRevendedor = 'https://smmexcellent.com/child-panel',
  linkAfiliado = 'https://smmexcellent.com/affiliates',
) {
  console.log('---------- GERAR RESPOSTA FINAL ------------');

  let respostaIA = '';
  let pedidosAptos = [];
  let pedidosNaoAptos = [];

  // Remover Order IDs duplicados
  const orderIdsUnicos = [...new Set(orderIds)]; // Agora a vari√°vel `orderIdsUnicos` √© usada aqui

  if (!Array.isArray(orderDataList)) {
    orderDataList = [orderDataList]; // Caso apenas um pedido tenha sido passado
  }

  // Iniciando a resposta com uma sauda√ß√£o
  const nomeUsuario = orderDataList[0]?.user; // Atribuindo o nome do usu√°rio de `orderDataList`

  if (!nomeUsuario) {
    console.log('‚ùå Nome do usu√°rio n√£o encontrado.');
    return 'Erro: Nome do usu√°rio n√£o encontrado.';
  }

  respostaIA += `Hello ${nomeUsuario},\n\n`; // Sauda√ß√£o personalizada com nome do usu√°rio

  // Processando todos os pedidos
  for (const orderData of orderDataList) {
    if (!orderData || !orderData.status) {
      console.log(`‚ùå Dados inv√°lidos para o pedido ${orderData.orderId}.`);
      pedidosNaoAptos.push({
        orderId: orderData.orderId,
        motivo: 'Dados incompletos',
      });
      continue;
    }

    // Gerar a resposta para cada pedido com mais detalhes
    if (tipoSolicitacao === 'Cancelamento') {
      if (orderData.status === 'canceled') {
        respostaIA += `Your order <strong>ID ${orderData.orderId}</strong> has already been <strong>canceled</strong>, as requested. You can place a new order at any time.\n\n`;
      } else if (orderData.status === 'completed') {
        respostaIA += `Your order <strong>ID ${orderData.orderId}</strong> is already <strong>complete</strong>. We cannot cancel an order that has already been completed.\n\n`;
      } else {
        respostaIA += `The <strong>cancellation</strong> request for your order <strong>ID ${orderData.orderId}</strong> has been forwarded to the responsible team. Your order will be canceled soon.\n\n`;
      }
    } else if (tipoSolicitacao === 'Acelera√ß√£o') {
      if (orderData.status === 'completed') {
        respostaIA += `Your order <strong>ID ${orderData.orderId}</strong> is already <strong>complete</strong>. We cannot expedite an order that has already been completed.\n\n`;
      } else if (orderData.status === 'canceled') {
        respostaIA += `Your order <strong>ID ${orderData.orderId}</strong> has been <strong>canceled</strong>. We cannot expedite an order that has been canceled.\n\n`;
      } else {
        respostaIA += `Your <strong>acceleration</strong> request has been forwarded to the responsible team. We will try to expedite your order <strong>ID ${orderData.orderId}</strong>.\n\n`;
      }
    } else if (tipoSolicitacao === 'Refil/Garantia') {
      respostaIA += `I‚Äôve forwarded your refill or warranty request to our specialized technical team for analysis. If your request is eligible, the refill or warranty will be processed within 0‚Äì48h after approval. \nIf you need anything else, don‚Äôt hesitate to contact us again\n\n`;
    } else {
      respostaIA += `Your request will be forwarded to our specialized technical team for analysis. We will contact you soon.\n\n`;
    }
  }

  // **Conclusion and links**
  respostaIA += `---\nIf you need more information, we are available to help.\n\nBest regards,\n\n${nomeAtendente}\n\n`;
  respostaIA += `‚ûï Join us as a reseller for just $25 - [Reseller Link](${linkRevendedor})\n`;
  respostaIA += `‚ûï Invite friends, share your link, and earn! - [Affiliate Link](${linkAfiliado})\n`;

  // **A tradu√ß√£o s√≥ acontece se o idioma detectado n√£o for ingl√™s**
  let respostaTraduzida = respostaIA;
  if (idiomaDetectado !== 'en') {
    console.log(`üåç Traduzindo a resposta para o idioma: ${idiomaDetectado}`);
    respostaTraduzida = await traduzirTexto(respostaIA, idiomaDetectado); // Traduz apenas se n√£o for ingl√™s
  }

  // Retornamos a resposta gerada, sem enviar diretamente
  return respostaTraduzida;
}

module.exports = {
  gerarRespostaFinal,
  verificarTipoDeSolicitacao,
  detectLanguage,
  traduzirTexto,
  gerarMensagemSolicitandoOrderId,
  extrairTodosOrderIds,
  processarOrderIds,
  cortarMensagemUtil,
};
